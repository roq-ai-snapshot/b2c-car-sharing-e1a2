generator client {
  provider = "prisma-client-js"
  previewFeatures = ["clientExtensions", "postgresqlExtensions"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  extensions      = [pgcrypto]
}

model booking {
  id         String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  start_date DateTime @db.Timestamp(6)
  end_date   DateTime @db.Timestamp(6)
  status     String   @db.VarChar(255)
  car_id     String   @db.Uuid
  user_id    String   @db.Uuid
  created_at DateTime @default(now()) @db.Timestamp(6)
  updated_at DateTime @default(now()) @db.Timestamp(6)
  car        car      @relation(fields: [car_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_booking_car")
  user       user     @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_booking_user")
}

model car {
  id           String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  model        String    @db.VarChar(255)
  year         Int
  color        String    @db.VarChar(255)
  location     String    @db.VarChar(255)
  availability Boolean   @default(true)
  company_id   String    @db.Uuid
  created_at   DateTime  @default(now()) @db.Timestamp(6)
  updated_at   DateTime  @default(now()) @db.Timestamp(6)
  booking      booking[]
  company      company   @relation(fields: [company_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_car_company")
}

model company {
  id          String       @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  description String?      @db.VarChar(255)
  name        String       @db.VarChar(255)
  created_at  DateTime     @default(now()) @db.Timestamp(6)
  updated_at  DateTime     @default(now()) @db.Timestamp(6)
  user_id     String       @db.Uuid
  tenant_id   String       @db.VarChar(255)
  car         car[]
  user        user         @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  invitation  invitation[]
}

model invitation {
  id            String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  status        String   @db.VarChar(255)
  invited_email String   @db.VarChar(255)
  role          String   @db.VarChar(255)
  company_id    String   @db.Uuid
  user_id       String   @db.Uuid
  created_at    DateTime @default(now()) @db.Timestamp(6)
  updated_at    DateTime @default(now()) @db.Timestamp(6)
  company       company  @relation(fields: [company_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_invitation_company")
  user          user     @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_invitation_user")
}

model user {
  id          String       @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  email       String       @unique @db.VarChar(255)
  firstName   String?      @db.VarChar(255)
  lastName    String?      @db.VarChar(255)
  roq_user_id String       @db.VarChar(255)
  tenant_id   String       @db.VarChar(255)
  created_at  DateTime     @default(now()) @db.Timestamp(6)
  updated_at  DateTime     @default(now()) @db.Timestamp(6)
  booking     booking[]
  company     company[]
  invitation  invitation[]
}
